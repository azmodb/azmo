/*
 * GENERATED BY 'go run ../internal/generator -h -root .'; DO NOT EDIT!
 */

#ifndef __FCALL_H
#define __FCALL_H

#include "binary.h"

/*
 * 9P2000.L operations. There are 30 basic operations in 9P2000.L, paired
 * as requests and responses. The one special case is ERROR as there is
 * no NINEP_TERROR request for clients to transmit to the server, but the
 * server may respond to any other request with an NINEP_RERROR.
 *
 * See also: http://9p.io/sys/man/5/INDEX.html
 */
enum {
	TVERSION     = 100,
	RVERSION     = 101,
	TFLUSH       = 108,
	RFLUSH       = 109,
	TWALK        = 110,
	RWALK        = 111,
	TCLUNK       = 120,
	RCLUNK       = 121,
	TREMOVE      = 122,
	RREMOVE      = 123,
	TAUTH        = 102,
	RAUTH        = 103,
	TATTACH      = 104,
	RATTACH      = 105,
	TREAD        = 116,
	RREAD        = 117,
	TWRITE       = 118,
	RWRITE       = 119,
	TSTATFS      = 8,
	RSTATFS      = 9,
	TOPEN        = 12,
	ROPEN        = 13,
	TCREATE      = 14,
	RCREATE      = 15,
	TSYMLINK     = 16,
	RSYMLINK     = 17,
	TMKNOD       = 18,
	RMKNOD       = 19,
	TRENAME      = 20,
	RRENAME      = 21,
	TREADLINK    = 22,
	RREADLINK    = 23,
	TGETATTR     = 24,
	RGETATTR     = 25,
	TSETATTR     = 26,
	RSETATTR     = 27,
	TXATTRWALK   = 30,
	RXATTRWALK   = 31,
	TXATTRCREATE = 32,
	RXATTRCREATE = 33,
	TREADDIR     = 40,
	RREADDIR     = 41,
	TFYNC        = 50,
	RFSYNC       = 51,
	TLOCK        = 52,
	RLOCK        = 53,
	TGETLOCK     = 54,
	RGETLOCK     = 55,
	TLINK        = 70,
	RLINK        = 71,
	TMKDIR       = 72,
	RMKDIR       = 73,
	TRENAMEAT    = 74,
	RRENAMEAT    = 75,
	TUNLINKAT    = 76,
	RUNLINKAT    = 77,
	RERROR       = 7,
};

/*
 * Qids are identifiers used by 9P2000.L servers to track file system
 * entities. The type is used to differentiate semantics for operations
 * on the entity. The path provides a server unique index for an entity
 * (roughly analogous to an inode number), while the version is updated
 * every time a file is modified and can be used to maintain cache
 * coherency between clients and serves.
 *
 * See also: http://9p.io/magic/man2html/2/stat
 */
typedef struct qid_t qid_t;
struct qid_t {
	uint8_t  type;
	uint32_t version;
	uint64_t path;
};

typedef struct tversion_t     tversion_t;
typedef struct rversion_t     rversion_t;
typedef struct tflush_t       tflush_t;
typedef struct rflush_t       rflush_t;
typedef struct twalk_t        twalk_t;
typedef struct rwalk_t        rwalk_t;
typedef struct tclunk_t       tclunk_t;
typedef struct rclunk_t       rclunk_t;
typedef struct tremove_t      tremove_t;
typedef struct rremove_t      rremove_t;
typedef struct tauth_t        tauth_t;
typedef struct rauth_t        rauth_t;
typedef struct tattach_t      tattach_t;
typedef struct rattach_t      rattach_t;
typedef struct tread_t        tread_t;
typedef struct rread_t        rread_t;
typedef struct twrite_t       twrite_t;
typedef struct rwrite_t       rwrite_t;
typedef struct tstatfs_t      tstatfs_t;
typedef struct rstatfs_t      rstatfs_t;
typedef struct topen_t        topen_t;
typedef struct ropen_t        ropen_t;
typedef struct tcreate_t      tcreate_t;
typedef struct rcreate_t      rcreate_t;
typedef struct tsymlink_t     tsymlink_t;
typedef struct rsymlink_t     rsymlink_t;
typedef struct tmknod_t       tmknod_t;
typedef struct rmknod_t       rmknod_t;
typedef struct trename_t      trename_t;
typedef struct rrename_t      rrename_t;
typedef struct treadlink_t    treadlink_t;
typedef struct rreadlink_t    rreadlink_t;
typedef struct tgetattr_t     tgetattr_t;
typedef struct rgetattr_t     rgetattr_t;
typedef struct tsetattr_t     tsetattr_t;
typedef struct rsetattr_t     rsetattr_t;
typedef struct txattrwalk_t   txattrwalk_t;
typedef struct rxattrwalk_t   rxattrwalk_t;
typedef struct txattrcreate_t txattrcreate_t;
typedef struct rxattrcreate_t rxattrcreate_t;
typedef struct treaddir_t     treaddir_t;
typedef struct rreaddir_t     rreaddir_t;
typedef struct tfync_t        tfync_t;
typedef struct rfsync_t       rfsync_t;
typedef struct tlock_t        tlock_t;
typedef struct rlock_t        rlock_t;
typedef struct tgetlock_t     tgetlock_t;
typedef struct rgetlock_t     rgetlock_t;
typedef struct tlink_t        tlink_t;
typedef struct rlink_t        rlink_t;
typedef struct tmkdir_t       tmkdir_t;
typedef struct rmkdir_t       rmkdir_t;
typedef struct trenameat_t    trenameat_t;
typedef struct rrenameat_t    rrenameat_t;
typedef struct tunlinkat_t    tunlinkat_t;
typedef struct runlinkat_t    runlinkat_t;
typedef struct rerror_t       rerror_t;

typedef struct fcall_t fcall_t;

struct tversion_t {
	uint32_t msize;
	char*    version;
};

struct rversion_t {
	uint32_t msize;
	char*    version;
};

struct tflush_t {
	uint16_t oldtag;
};

struct rflush_t {
};

struct twalk_t {
	uint32_t fid;
	uint32_t newfid;
	char*    names;
};

struct rwalk_t {
	qid_t qid;
};

struct tclunk_t {
	uint32_t fid;
};

struct rclunk_t {
};

struct tremove_t {
	uint32_t fid;
};

struct rremove_t {
};

struct tauth_t {
	uint32_t afid;
	char*    uname;
	char*    aname;
	uint32_t uid;
};

struct rauth_t {
	qid_t qid;
};

struct tattach_t {
	uint32_t fid;
	uint32_t afid;
	char*    uname;
	char*    aname;
	uint32_t uid;
};

struct rattach_t {
	qid_t qid;
};

struct tread_t {
	uint32_t fid;
	uint64_t offset;
	uint32_t count;
};

struct rread_t {
	char* data;
};

struct twrite_t {
	uint32_t fid;
	uint64_t offset;
	char*    data;
};

struct rwrite_t {
	uint32_t count;
};

struct tstatfs_t {
	uint32_t fid;
};

struct rstatfs_t {
	uint32_t type;
	uint32_t bsize;
	uint64_t blocks;
	uint64_t bfree;
	uint64_t bavail;
	uint64_t files;
	uint64_t ffree;
	uint64_t fsid;
	uint32_t namelen;
};

struct topen_t {
	uint32_t fid;
	uint32_t flags;
};

struct ropen_t {
	qid_t    qid;
	uint32_t iounit;
};

struct tcreate_t {
	uint32_t fid;
	char*    name;
	uint32_t flags;
	uint32_t mode;
	uint32_t gid;
};

struct rcreate_t {
	qid_t    qid;
	uint32_t iounit;
};

struct tsymlink_t {
	uint32_t fid;
	char*    name;
	char*    symtgt;
	uint32_t gid;
};

struct rsymlink_t {
	qid_t qid;
};

struct tmknod_t {
	uint32_t dfid;
	char*    name;
	uint32_t mode;
	uint32_t major;
	uint32_t minor;
	uint32_t gid;
};

struct rmknod_t {
	qid_t qid;
};

struct trename_t {
	uint32_t fid;
	uint32_t dfid;
	char*    name;
};

struct rrename_t {
};

struct treadlink_t {
	uint32_t fid;
};

struct rreadlink_t {
	char* target;
};

struct tgetattr_t {
	uint32_t fid;
	uint64_t request_mask;
};

struct rgetattr_t {
	uint64_t valid;
	qid_t    qid;
	uint32_t mode;
	uint32_t uid;
	uint32_t gid;
	uint64_t nlink;
	uint64_t rdev;
	uint64_t size;
	uint64_t blksize;
	uint64_t blocks;
	uint64_t atime_sec;
	uint64_t atime_nsec;
	uint64_t mtime_sec;
	uint64_t mtime_nsec;
	uint64_t ctime_sec;
	uint64_t ctime_nsec;
	uint64_t btime_sec;
	uint64_t btime_nsec;
	uint64_t gen;
	uint64_t data_version;
};

struct tsetattr_t {
	uint32_t fid;
	uint32_t valid;
	uint32_t mode;
	uint32_t uid;
	uint32_t gid;
	uint64_t size;
	uint64_t atime_sec;
	uint64_t atime_nsec;
	uint64_t mtime_sec;
	uint64_t mtime_nsec;
};

struct rsetattr_t {
};

struct txattrwalk_t {
	uint32_t fid;
	uint32_t newfid;
	char*    name;
};

struct rxattrwalk_t {
	uint64_t size;
};

struct txattrcreate_t {
	uint32_t fid;
	char*    name;
	uint64_t attr_size;
	uint32_t flags;
};

struct rxattrcreate_t {
};

struct treaddir_t {
	uint32_t fid;
	uint64_t offset;
	uint32_t count;
};

struct rreaddir_t {
	char* data;
};

struct tfync_t {
	uint32_t fid;
};

struct rfsync_t {
};

struct tlock_t {
	uint32_t fid;
	uint8_t  type;
	uint32_t flags;
	uint64_t start;
	uint64_t length;
	uint32_t proc_id;
	char*    client_id;
};

struct rlock_t {
	uint8_t status;
};

struct tgetlock_t {
	uint32_t fid;
	uint8_t  type;
	uint64_t start;
	uint64_t length;
	uint32_t proc_id;
	char*    client_id;
};

struct rgetlock_t {
	uint8_t  type;
	uint64_t start;
	uint64_t length;
	uint32_t proc_id;
	char*    client_id;
};

struct tlink_t {
	uint32_t dfid;
	uint32_t fid;
	char*    name;
};

struct rlink_t {
};

struct tmkdir_t {
	uint32_t dfid;
	char*    name;
	uint32_t mode;
	uint32_t gid;
};

struct rmkdir_t {
	qid_t qid;
};

struct trenameat_t {
	uint32_t olddirfid;
	char*    oldname;
	uint32_t newdirfid;
	char*    newname;
};

struct rrenameat_t {
};

struct tunlinkat_t {
	uint32_t dirfd;
	char*    name;
	uint32_t flags;
};

struct runlinkat_t {
};

struct rerror_t {
	uint32_t ecode;
};

struct fcall_t {
	uint8_t  type;
	uint16_t tag;

	union {
		tversion_t     tversion;
		rversion_t     rversion;
		tflush_t       tflush;
		rflush_t       rflush;
		twalk_t        twalk;
		rwalk_t        rwalk;
		tclunk_t       tclunk;
		rclunk_t       rclunk;
		tremove_t      tremove;
		rremove_t      rremove;
		tauth_t        tauth;
		rauth_t        rauth;
		tattach_t      tattach;
		rattach_t      rattach;
		tread_t        tread;
		rread_t        rread;
		twrite_t       twrite;
		rwrite_t       rwrite;
		tstatfs_t      tstatfs;
		rstatfs_t      rstatfs;
		topen_t        topen;
		ropen_t        ropen;
		tcreate_t      tcreate;
		rcreate_t      rcreate;
		tsymlink_t     tsymlink;
		rsymlink_t     rsymlink;
		tmknod_t       tmknod;
		rmknod_t       rmknod;
		trename_t      trename;
		rrename_t      rrename;
		treadlink_t    treadlink;
		rreadlink_t    rreadlink;
		tgetattr_t     tgetattr;
		rgetattr_t     rgetattr;
		tsetattr_t     tsetattr;
		rsetattr_t     rsetattr;
		txattrwalk_t   txattrwalk;
		rxattrwalk_t   rxattrwalk;
		txattrcreate_t txattrcreate;
		rxattrcreate_t rxattrcreate;
		treaddir_t     treaddir;
		rreaddir_t     rreaddir;
		tfync_t        tfync;
		rfsync_t       rfsync;
		tlock_t        tlock;
		rlock_t        rlock;
		tgetlock_t     tgetlock;
		rgetlock_t     rgetlock;
		tlink_t        tlink;
		rlink_t        rlink;
		tmkdir_t       tmkdir;
		rmkdir_t       rmkdir;
		trenameat_t    trenameat;
		rrenameat_t    rrenameat;
		tunlinkat_t    tunlinkat;
		runlinkat_t    runlinkat;
		rerror_t       rerror;
	};
};

ssize_t fcall_unmarshal(unsigned char*, size_t, fcall_t*);
ssize_t fcall_marshal(unsigned char*, size_t, fcall_t*);
ssize_t fcall_size(fcall_t*);

#endif /* __FCALL_H */
