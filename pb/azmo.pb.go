// Code generated by protoc-gen-go.
// source: azmo.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	azmo.proto

It has these top-level messages:
	TxnRequest
	TxnResponse
	GenericRequest
	GenericResponse
	PutRequest
	PutResponse
	DeleteRequest
	DeleteResponse
	GetRequest
	GetResponse
	RangeRequest
	RangeResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GenericRequest_Type int32

const (
	GenericRequest_InvalidRequest GenericRequest_Type = 0
	GenericRequest_DeleteRequest  GenericRequest_Type = 1
	GenericRequest_PutRequest     GenericRequest_Type = 2
)

var GenericRequest_Type_name = map[int32]string{
	0: "InvalidRequest",
	1: "DeleteRequest",
	2: "PutRequest",
}
var GenericRequest_Type_value = map[string]int32{
	"InvalidRequest": 0,
	"DeleteRequest":  1,
	"PutRequest":     2,
}

func (x GenericRequest_Type) String() string {
	return proto.EnumName(GenericRequest_Type_name, int32(x))
}
func (GenericRequest_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type TxnRequest struct {
	Requests []*GenericRequest `protobuf:"bytes,1,rep,name=requests" json:"requests,omitempty"`
}

func (m *TxnRequest) Reset()                    { *m = TxnRequest{} }
func (m *TxnRequest) String() string            { return proto.CompactTextString(m) }
func (*TxnRequest) ProtoMessage()               {}
func (*TxnRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *TxnRequest) GetRequests() []*GenericRequest {
	if m != nil {
		return m.Requests
	}
	return nil
}

type TxnResponse struct {
	Responses []*GenericResponse `protobuf:"bytes,1,rep,name=responses" json:"responses,omitempty"`
}

func (m *TxnResponse) Reset()                    { *m = TxnResponse{} }
func (m *TxnResponse) String() string            { return proto.CompactTextString(m) }
func (*TxnResponse) ProtoMessage()               {}
func (*TxnResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TxnResponse) GetResponses() []*GenericResponse {
	if m != nil {
		return m.Responses
	}
	return nil
}

type GenericRequest struct {
	Type      GenericRequest_Type `protobuf:"varint,1,opt,name=type,enum=azmo.GenericRequest_Type" json:"type,omitempty"`
	Num       int32               `protobuf:"varint,2,opt,name=num" json:"num,omitempty"`
	Key       []byte              `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte              `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Tombstone bool                `protobuf:"varint,5,opt,name=tombstone" json:"tombstone,omitempty"`
}

func (m *GenericRequest) Reset()                    { *m = GenericRequest{} }
func (m *GenericRequest) String() string            { return proto.CompactTextString(m) }
func (*GenericRequest) ProtoMessage()               {}
func (*GenericRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GenericResponse struct {
	Num  int32   `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
	Revs []int64 `protobuf:"varint,2,rep,name=revs" json:"revs,omitempty"`
	Rev  int64   `protobuf:"varint,3,opt,name=rev" json:"rev,omitempty"`
}

func (m *GenericResponse) Reset()                    { *m = GenericResponse{} }
func (m *GenericResponse) String() string            { return proto.CompactTextString(m) }
func (*GenericResponse) ProtoMessage()               {}
func (*GenericResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type PutRequest struct {
	Key       []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	Value     []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Tombstone bool   `protobuf:"varint,4,opt,name=tombstone" json:"tombstone,omitempty"`
}

func (m *PutRequest) Reset()                    { *m = PutRequest{} }
func (m *PutRequest) String() string            { return proto.CompactTextString(m) }
func (*PutRequest) ProtoMessage()               {}
func (*PutRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type PutResponse struct {
	Revs []int64 `protobuf:"varint,1,rep,name=revs" json:"revs,omitempty"`
	Rev  int64   `protobuf:"varint,2,opt,name=rev" json:"rev,omitempty"`
}

func (m *PutResponse) Reset()                    { *m = PutResponse{} }
func (m *PutResponse) String() string            { return proto.CompactTextString(m) }
func (*PutResponse) ProtoMessage()               {}
func (*PutResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type DeleteRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type DeleteResponse struct {
	Revs []int64 `protobuf:"varint,1,rep,name=revs" json:"revs,omitempty"`
	Rev  int64   `protobuf:"varint,2,opt,name=rev" json:"rev,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type GetRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Rev int64  `protobuf:"varint,2,opt,name=rev" json:"rev,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type GetResponse struct {
	Value []byte  `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Revs  []int64 `protobuf:"varint,2,rep,name=revs" json:"revs,omitempty"`
	Rev   int64   `protobuf:"varint,3,opt,name=rev" json:"rev,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type RangeRequest struct {
	From []byte `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   []byte `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
	Rev  int64  `protobuf:"varint,3,opt,name=rev" json:"rev,omitempty"`
}

func (m *RangeRequest) Reset()                    { *m = RangeRequest{} }
func (m *RangeRequest) String() string            { return proto.CompactTextString(m) }
func (*RangeRequest) ProtoMessage()               {}
func (*RangeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type RangeResponse struct {
	Key   []byte  `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Revs  []int64 `protobuf:"varint,2,rep,name=revs" json:"revs,omitempty"`
	Value []byte  `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	Rev   int64   `protobuf:"varint,4,opt,name=rev" json:"rev,omitempty"`
}

func (m *RangeResponse) Reset()                    { *m = RangeResponse{} }
func (m *RangeResponse) String() string            { return proto.CompactTextString(m) }
func (*RangeResponse) ProtoMessage()               {}
func (*RangeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func init() {
	proto.RegisterType((*TxnRequest)(nil), "azmo.TxnRequest")
	proto.RegisterType((*TxnResponse)(nil), "azmo.TxnResponse")
	proto.RegisterType((*GenericRequest)(nil), "azmo.GenericRequest")
	proto.RegisterType((*GenericResponse)(nil), "azmo.GenericResponse")
	proto.RegisterType((*PutRequest)(nil), "azmo.PutRequest")
	proto.RegisterType((*PutResponse)(nil), "azmo.PutResponse")
	proto.RegisterType((*DeleteRequest)(nil), "azmo.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "azmo.DeleteResponse")
	proto.RegisterType((*GetRequest)(nil), "azmo.GetRequest")
	proto.RegisterType((*GetResponse)(nil), "azmo.GetResponse")
	proto.RegisterType((*RangeRequest)(nil), "azmo.RangeRequest")
	proto.RegisterType((*RangeResponse)(nil), "azmo.RangeResponse")
	proto.RegisterEnum("azmo.GenericRequest_Type", GenericRequest_Type_name, GenericRequest_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for DB service

type DBClient interface {
	Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (DB_RangeClient, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error)
	Txn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnResponse, error)
}

type dBClient struct {
	cc *grpc.ClientConn
}

func NewDBClient(cc *grpc.ClientConn) DBClient {
	return &dBClient{cc}
}

func (c *dBClient) Range(ctx context.Context, in *RangeRequest, opts ...grpc.CallOption) (DB_RangeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DB_serviceDesc.Streams[0], c.cc, "/azmo.DB/Range", opts...)
	if err != nil {
		return nil, err
	}
	x := &dBRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DB_RangeClient interface {
	Recv() (*RangeResponse, error)
	grpc.ClientStream
}

type dBRangeClient struct {
	grpc.ClientStream
}

func (x *dBRangeClient) Recv() (*RangeResponse, error) {
	m := new(RangeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dBClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/azmo.DB/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/azmo.DB/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*PutResponse, error) {
	out := new(PutResponse)
	err := grpc.Invoke(ctx, "/azmo.DB/Put", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBClient) Txn(ctx context.Context, in *TxnRequest, opts ...grpc.CallOption) (*TxnResponse, error) {
	out := new(TxnResponse)
	err := grpc.Invoke(ctx, "/azmo.DB/Txn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DB service

type DBServer interface {
	Range(*RangeRequest, DB_RangeServer) error
	Get(context.Context, *GetRequest) (*GetResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	Put(context.Context, *PutRequest) (*PutResponse, error)
	Txn(context.Context, *TxnRequest) (*TxnResponse, error)
}

func RegisterDBServer(s *grpc.Server, srv DBServer) {
	s.RegisterService(&_DB_serviceDesc, srv)
}

func _DB_Range_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RangeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DBServer).Range(m, &dBRangeServer{stream})
}

type DB_RangeServer interface {
	Send(*RangeResponse) error
	grpc.ServerStream
}

type dBRangeServer struct {
	grpc.ServerStream
}

func (x *dBRangeServer) Send(m *RangeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _DB_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azmo.DB/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azmo.DB/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azmo.DB/Put",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DB_Txn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TxnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBServer).Txn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/azmo.DB/Txn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBServer).Txn(ctx, req.(*TxnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "azmo.DB",
	HandlerType: (*DBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DB_Get_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DB_Delete_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _DB_Put_Handler,
		},
		{
			MethodName: "Txn",
			Handler:    _DB_Txn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Range",
			Handler:       _DB_Range_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x65, 0xbd, 0x9b, 0xaa, 0x9d, 0xb4, 0x26, 0x1d, 0x82, 0x64, 0x22, 0x0e, 0xe0, 0x53, 0x84,
	0x44, 0x14, 0x25, 0x12, 0x37, 0x38, 0x44, 0x91, 0xaa, 0xdc, 0xd0, 0xaa, 0x27, 0x24, 0x0e, 0x09,
	0x2c, 0xa8, 0xa2, 0xf1, 0x1a, 0x7b, 0x5d, 0x51, 0x7e, 0x28, 0xff, 0x83, 0x7f, 0xc0, 0x78, 0xbd,
	0xeb, 0x2f, 0x5c, 0x09, 0x4e, 0x79, 0x19, 0xbf, 0x79, 0xf3, 0x66, 0x66, 0x77, 0x01, 0xf6, 0x3f,
	0x8f, 0x7a, 0x91, 0x66, 0xda, 0x68, 0x14, 0x25, 0x8e, 0xdf, 0x01, 0x5c, 0xff, 0x48, 0xa4, 0xfa,
	0x5e, 0xa8, 0xdc, 0xe0, 0x12, 0x4e, 0xb3, 0x0a, 0xe6, 0x11, 0x7b, 0xc1, 0xe7, 0xe3, 0xd5, 0x74,
	0x61, 0x53, 0xae, 0x54, 0xa2, 0xb2, 0x9b, 0x4f, 0x8e, 0x27, 0x6b, 0x56, 0xbc, 0x81, 0xb1, 0xcd,
	0xcf, 0x53, 0x9d, 0xe4, 0x0a, 0xd7, 0x70, 0x96, 0x39, 0xec, 0x15, 0x9e, 0xf6, 0x14, 0xaa, 0xaf,
	0xb2, 0xe1, 0xc5, 0xbf, 0x18, 0x84, 0xdd, 0x02, 0xf8, 0x1a, 0x84, 0xb9, 0x4f, 0x15, 0x49, 0xb0,
	0x79, 0xb8, 0x7a, 0x36, 0x64, 0x62, 0x71, 0x4d, 0x04, 0x69, 0x69, 0x38, 0x01, 0x9e, 0x14, 0xc7,
	0x28, 0x20, 0xf6, 0x48, 0x96, 0xb0, 0x8c, 0x7c, 0x53, 0xf7, 0x11, 0xa7, 0xc8, 0xb9, 0x2c, 0x21,
	0x4e, 0x61, 0x74, 0xb7, 0xbf, 0x2d, 0x54, 0x24, 0x6c, 0xac, 0xfa, 0x83, 0xcf, 0xe1, 0xcc, 0xe8,
	0xe3, 0x21, 0x37, 0x3a, 0x51, 0xd1, 0x88, 0xbe, 0x9c, 0xca, 0x26, 0x10, 0xbf, 0x05, 0x51, 0x56,
	0x41, 0x84, 0x70, 0x97, 0x50, 0xc2, 0xcd, 0x67, 0x57, 0x7c, 0xf2, 0x08, 0x2f, 0xe1, 0x62, 0xab,
	0x6e, 0x95, 0x51, 0x3e, 0xc4, 0x30, 0x04, 0x78, 0x5f, 0x18, 0xff, 0x3f, 0x88, 0x77, 0xf0, 0xb8,
	0xd7, 0xb6, 0x77, 0xca, 0x1a, 0xa7, 0x08, 0x22, 0x53, 0x77, 0x39, 0x99, 0xe7, 0x73, 0x2e, 0x2d,
	0x2e, 0x59, 0xf4, 0x6b, 0xdd, 0x73, 0x59, 0xc2, 0x58, 0xb6, 0xa5, 0x7d, 0x77, 0xc1, 0x40, 0x77,
	0xfc, 0xc1, 0xee, 0x44, 0xbf, 0xbb, 0x35, 0x8c, 0xad, 0xa6, 0xb3, 0xe6, 0x8d, 0xb0, 0xbf, 0x8d,
	0x04, 0x8d, 0x91, 0x97, 0xbd, 0xb6, 0xbd, 0x17, 0x56, 0x7b, 0x89, 0xdf, 0x40, 0xe8, 0x29, 0xff,
	0x25, 0xbd, 0x04, 0xb8, 0x52, 0xe6, 0x41, 0xdd, 0x81, 0x8c, 0x1d, 0x8c, 0x6d, 0x86, 0x2b, 0x53,
	0x0f, 0x81, 0xb5, 0x87, 0xf0, 0x6f, 0x03, 0xde, 0xc2, 0xb9, 0xdc, 0x27, 0x5f, 0xeb, 0xb6, 0x28,
	0xeb, 0x4b, 0xa6, 0x8f, 0x4e, 0xca, 0x62, 0xda, 0x6f, 0x60, 0xb4, 0x9b, 0x3a, 0xa1, 0x01, 0x95,
	0x8f, 0x70, 0xe1, 0x54, 0x9a, 0x7d, 0xf7, 0xba, 0x18, 0xb2, 0x33, 0xbc, 0x3d, 0x27, 0x2f, 0x6a,
	0xf9, 0xd5, 0x6f, 0x06, 0xc1, 0x76, 0x83, 0x2b, 0x18, 0xd9, 0x2a, 0x88, 0xd5, 0xc5, 0x68, 0x1b,
	0x9f, 0x3d, 0xe9, 0xc4, 0x2a, 0x1b, 0x4b, 0x86, 0xaf, 0x80, 0xd3, 0xa8, 0x70, 0xe2, 0xaf, 0x92,
	0x9f, 0xf3, 0xec, 0xb2, 0x15, 0xa9, 0x6f, 0xf1, 0x49, 0xb5, 0x40, 0x74, 0x62, 0x9d, 0x8d, 0xcf,
	0xa6, 0xdd, 0xa0, 0x4b, 0xa2, 0x02, 0x74, 0x9a, 0x7c, 0x81, 0xe6, 0xb0, 0xfa, 0x02, 0xed, 0xa3,
	0x46, 0x5c, 0x7a, 0x35, 0x3c, 0xb7, 0x79, 0x80, 0x3c, 0xb7, 0xf5, 0xa4, 0x6c, 0xc4, 0x87, 0x20,
	0x3d, 0x1c, 0x4e, 0xec, 0xa3, 0xb5, 0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0x90, 0x75, 0x03, 0xac,
	0xc2, 0x04, 0x00, 0x00,
}
